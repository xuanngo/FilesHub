package net.xngo.fileshub.db;


import java.sql.ResultSet;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.xngo.fileshub.Config;

/**
 * All database connection settings initialized.
 * @author Xuan Ngo
 *
 */
public class Connection extends net.xngo.utils.java.db.Connection
{
  final static Logger log = LoggerFactory.getLogger(net.xngo.fileshub.db.Connection.class);
  
  public Connection()
  {
    super.connect(Config.JDBC_CLASSLOADER, Config.DB_URL);
  }
  
  @Override
  public void commit() throws SQLException
  {
    long start = System.currentTimeMillis();
    super.commit();
    long end = System.currentTimeMillis()-start;
    long MAX_TIME = 2000; // 2 seconds
    if(end > MAX_TIME)
    {
      log.warn("Commit() is too slow. It took {} milliseconds. Last Query={}", end, super.getQueryString());
      System.out.println(String.format("Commit() is too slow. It took %,d milliseconds. Last Query=%s", end, super.getQueryString()));
    }
  }
  
  /**
   * Time execution.
   * Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
   * @return a ResultSet object that contains the data produced by the query; never null
   * @throws SQLException
   */
  @Override
  public ResultSet executeQuery() throws SQLException
  {
    long start = System.currentTimeMillis();
    ResultSet resultSet = this.preparedStatement.executeQuery();
    long end = System.currentTimeMillis()-start;
    long MAX_TIME = 2000; // 2 seconds
    if(end > MAX_TIME)
    {
      log.warn("SQL query is too slow. It took {} milliseconds. Query={}", end, super.getQueryString());
      System.out.println(String.format("SQL query is too slow. It took %,d milliseconds. Query=%s", end, super.getQueryString()));
    }
    
    return resultSet;
  }
  
  /**
   * Time execution.
   * Executes the SQL statement in this PreparedStatement object, 
   * which must be an SQL Data Manipulation Language (DML) statement, 
   * such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, 
   * such as a DDL statement.
   * @return either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing
   */
  @Override
  public int executeUpdate()
  {
    long start = System.currentTimeMillis();
    int updateResult = super.executeUpdate();
    long end = System.currentTimeMillis()-start;
    long MAX_TIME = 2000; // 2 seconds
    if(end > MAX_TIME)
    {
      log.warn("SQL query is too slow. It took {} milliseconds. Query={}", end, super.getQueryString());
      System.out.println(String.format("SQL query is too slow. It took %,d milliseconds. Query=%s", end, super.getQueryString()));
    }
    
    return updateResult;
  }  
}
