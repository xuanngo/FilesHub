<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="create_run_jar" name="Create Runnable Jar for Project FilesHub with Jar-in-Jar Loader">
	<!-- Require ANT version 1.7+ because of manifestclasspath -->

	<property name="latest.release.directory" value="./releases/latest"/>
	<property name="test.release.dir"         value="./test-release"/>
	<property name="latest.jar.file.path"     value="${latest.release.directory}/Fileshub.jar"/>
	<property name="binary.dir"               value="./bin"/>
	
	<path id="release.jar.paths">
		<fileset dir="${latest.release.directory}/libs/">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="test.jar.paths">
		<fileset dir="${latest.release.directory}/libs/">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="./libs-not-to-release/">
			<include name="**/*hamcrest*.jar"/>
			<include name="**/*testng*.jar"/>
		</fileset>
	</path>
	
	<path id="classes.path">
		<pathelement location="${binary.dir}"/>
	</path>
	

	<target depends="cleanall, build-project" name="create_run_jar">
		<delete verbose="true" file="${latest.jar.file.path}"/> <!-- Guarantee JAR is always the latest. -->
		
		<!-- This is the important line: by specifying in the "jarfile" attribute the location of the
				generated jar, ANT will be able to deduce the relative path to you jar libraries.
				http://stackoverflow.com/questions/858766/generate-manifest-class-path-from-classpath-in-ant 
		-->
		<manifestclasspath property="lib.list" jarfile="releases/latest/libs/">
			<classpath refid="release.jar.paths" />
		</manifestclasspath>

		<jar destfile="${latest.jar.file.path}">
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
				<attribute name="Rsrc-Main-Class" value="net.xngo.fileshub.Main"/>
				<attribute name="Class-Path" value="."/>
				<attribute name="Rsrc-Class-Path" value="./ ${lib.list}"/>
			</manifest>

			<!-- Add Binary -->
			<zipfileset src="jar-in-jar-loader.zip"/>
			<fileset dir="./bin">
				<exclude name="**/benchmark/**"/>
				<exclude name="**/tutorial/**"/>
				<exclude name="**/test/**"/>
			</fileset>
		</jar>

		<!-- Add version number in template.html . -->
		<tstamp>
			<format property="DAY_TIME_NOW" pattern="yyyy-MM-dd_HH.mm.ss" />
		</tstamp>
		<replaceregexp file="${latest.release.directory}/template.html"
		   match="@version = .*"
		   replace="@version = ${DAY_TIME_NOW}"
		/>

		<antcall target="copy_build_to_test_dir"/>
		<antcall target="delete_files"/>

	</target>

	<target name="copy_build_to_test_dir">
		<!-- Ensure test-release directory is exactly the same as releases directory. -->
		<delete verbose="true" dir="${test.release.dir}"/>
		<mkdir dir="${test.release.dir}"/>
		<copy overwrite="true" todir="${test.release.dir}">
			<fileset dir="${latest.release.directory}"/>
		</copy>
	</target>

	<!-- Clean up after built -->
	<target name="delete_files">
		<delete file="${latest.release.directory}/FilesHub.db"/>
		<!-- Guarantee no database will be touched when upgraded. Don't set verbose="true". File shouldn't exist. -->

		<delete verbose="true" file="./test/FilesHub.db"/>
		<delete verbose="true" dir="./test/test-output"/>
		<delete verbose="true" dir="./test/backupdb"/>

		<!-- Delete files with the following patterns: -->
		<delete verbose="true">
			<fileset dir="./" includes="**/results_*.csv"/>
			<fileset dir="./" includes="**/results_*.html"/>
			<fileset dir="./" includes="**/FilesHub*.log"/>
		</delete>

		<!-- Delete javadoc directory -->
		<delete verbose="true" dir="javadoc"/>
	</target>
	
	<!-- Turn test-release into debug mode -->
	<target name="debug">
		<echo>Turn ${test.release.dir}/ into debug mode.</echo>

		<!-- Modify logback.xml for testing purpose:
				-Change Level from WARN to DEBUG
		-->
		<replaceregexp file="${test.release.dir}/logback.xml"
					   match="&lt;root level=&quot;WARN&quot;&gt;"
					   replace="&lt;root level=&quot;DEBUG&quot;&gt;"
		/>
		
		<!-- Copy test helper scripts. -->
		<copy verbose="true" overwrite="true" todir="${test.release.dir}">
			<fileset dir="test">
				<include name="test.FilesHub.*"/>
				<include name="test.view.jar.files.*"/>
			</fileset>
		</copy>
    
		<!-- Make test helper scripts executable. -->
		<chmod perm="700">
			<fileset dir="${test.release.dir}">
				<include name="test.FilesHub.*"/>
				<include name="test.view.jar.files.*"/>
			</fileset>
		</chmod>
	</target>
	
	<!-- Rework, codes below are ugly--> 
	<target depends="clean, build-project" name="test">
		<antcall target="create_run_jar"/>
		<!-- Define <testng> task -->
		<taskdef name="testng" classname="org.testng.TestNGAntTask">
			<classpath>
				<pathelement location="libs-not-to-release/testng-6.8.8.jar"/>
			</classpath>
		</taskdef>

		<property name="testng.output.dir" value="test-output"/>
		<mkdir dir="${testng.output.dir}"/><!-- Create the output directory. -->

		<testng outputdir="${testng.output.dir}" classpathref="classes.path" failureProperty="test.failure">
			<jvmarg value="-DFilesHub.hash.frequency=13" />
			<jvmarg value="-Dlogback.configurationFile=${basedir}/test-release/logback.xml" /> 
			<jvmarg value="-DFilesHub.home=${basedir}/test-release" />

			<classpath refid="test.jar.paths"/>
			<xmlfileset dir="." includes="test/testng-fileshub.xml"/> 
		</testng>

		<fail if="test.failure" message="Not all tests passed!" />
	</target>
	
	<target name="build-project">
		<property name="target" value="1.7"/>
		<property name="source" value="${target}"/>
		<property name="debuglevel" value="source,lines,vars"/>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${binary.dir}" includeantruntime="false" source="${source}" target="${target}">
			<src path="src"/>
			<classpath refid="test.jar.paths"/>
		</javac>
	</target>	
	
	<target name="clean">
		<delete dir="${binary.dir}"/>
		<mkdir dir="${binary.dir}"/>
	</target>
	
	<target depends="clean" name="cleanall"/>
	
</project>
